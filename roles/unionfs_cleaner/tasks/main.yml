#########################################################################
# Title:         Cloudbox: UnionFS Cleaner Role                         #
# Author(s):     l3uddz                                                 #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check service exists
  stat:
    path: "/etc/systemd/system/unionfs_cleaner.service"
  register: unionfs_cleaner_service

- name: Stop existing unionfs_cleaner service
  systemd: state=stopped name=unionfs_cleaner
  when: unionfs_cleaner_service.stat.exists

- name: Create unionfs_cleaner directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "{{role_dir}}"

- name: Clone unionfs_cleaner
  git:
    repo: https://github.com/l3uddz/unionfs_cleaner/
    dest: "{{role_dir}}"
    version: "{{unionfs_cleaner.branch}}"
    force: yes

- name: Install pip requirements
  pip:
    requirements: "{{role_dir}}/requirements.txt"
    executable: pip3

- name: Check config exists
  stat:
    path: "{{role_dir}}/config.json"
  register: unionfs_cleaner_config

- name: Import default config
  template:
    src: config.json.js2
    dest: "{{role_dir}}/config.json"
    force: yes
  when: unionfs_cleaner_config.stat.exists == False

- name: Set cleaner.py as executable
  file:
    path: "{{role_dir}}/cleaner.py"
    mode: a+x

- name: Set directory permissions
  file: "path={{role_dir}} state=directory owner={{user}} group={{user}} recurse=yes"

- name: Import unionfs_cleaner service
  template:
    src: unionfs_cleaner.service.js2
    dest: /etc/systemd/system/"{{role_name}}".service
    force: yes
  when: unionfs_cleaner_service.stat.exists == False

- name: Start "{{role_name}}" service
  systemd: state=started name="{{role_name}}" daemon_reload=yes enabled=yes
