#########################################################################
# Title:         Cloudbox: Plex Role                                    #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# Docker Image:  plexinc/pms-docker                                     #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Setting CloudFlare DNS Record"
  include_role:
    name: cloudflare
  vars:
    subdomain: plex

- name: "Get {{user}} uid"
  shell: "id -u {{user}}"
  register: uid

- name: "Get {{user}} gid"
  shell: "id -g {{user}}"
  register: gid

- name: Create plex directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - "{{role_dir}}"
    - "{{plex.transcodes}}"

- name: Stop and remove any existing container
  docker_container:
    name: "{{role_name}}"
    state: absent

- name: Retrieve plex docker image
  docker_image:
    name: "linuxserver/plex"

- name: Check Preferences.xml exists
  stat:
    path: "{{role_dir}}/Library/Application Support/Plex Media Server/Preferences.xml"
  register: plex_prefs

- name: Get plex server claim id
  uri:
    url: https://plex.tv/api/claim/token.json
    user: "{{plex.user}}"
    password: "{{plex.pass}}"
    force_basic_auth: yes
  register: plexclaim
  when: plex_prefs.stat.exists == False

- name: set new claim token var
  set_fact: >
    plex_claim="{{plexclaim.json.token}}"
  when: plex_prefs.stat.exists == False

- debug: msg="Using plex claim token {{plex_claim}}"
  when: plex_prefs.stat.exists == False

- name: Setup two lists to be merged
  set_fact:
    plex_volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{role_dir}}:/config"
      - "{{plex.transcodes}}:/transcode"

- name: Grab IP for Lazyman
  set_fact:
    lazyman_ip: "{{ lookup('dig', 'powersports.ml.', '@8.8.8.8', 'qtype=A') }}"
    localhost_ip: "127.0.0.1"

- name: set a clean ipv4 IP
  set_fact:
    lazyman_ipv4: "{{ (lazyman_ip | ipv4) | ternary(lazyman_ip, localhost_ip) }}"

- name: Set plex hosts
  set_fact:
    plex_default_hosts:
      "metric.plex.tv": "{{ localhost_ip }}"
      "metrics.plex.tv": "{{ localhost_ip }}"
      "analytics.plex.tv": "{{ localhost_ip }}"
      "playback.svcs.mlb.com": "{{ lazyman_ipv4 }}"
      "mf.svc.nhl.com": "{{ lazyman_ipv4 }}"
      "mlb-ws-mf.media.mlb.com": "{{ lazyman_ipv4 }}"

- name: Create and start container
  docker_container:
    name: "{{role_name}}"
    image: "plexinc/pms-docker:{{plex.tag}}"
    pull: yes
    published_ports:
      - "127.0.0.1:32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "33400:33400/tcp"
      - "33443:33443/tcp"
    env:
      PLEX_UID: "{{uid.stdout}}"
      PLEX_GID: "{{gid.stdout}}"
      PLEX_CLAIM: "{{plex_claim| default (omit)}}"
      CHANGE_CONFIG_DIR_OWNERSHIP: false
      ADVERTISE_IP: "http://plex.{{domain}}:80/,https://plex.{{domain}}:443/"
      VIRTUAL_HOST: "plex.{{domain}}"
      VIRTUAL_PORT: 32400
      LETSENCRYPT_HOST: "plex.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
    volumes: "{{plex_volumes + docker_volumes.plex|default([])}}"
    restart_policy: always
    devices: "{{ '/dev/dri:/dev/dri' if plex.hw_transcode == 'True' | default(false) else omit }}"
    etc_hosts: "{{plex_default_hosts}}"
    networks:
      - name: cloudbox
        aliases:
          - "{{role_name}}"
    state: started

# we need this here because sometimes after a restore, docker will set this transcodes folder to root, dont ask why, but it does...
- name: "Wait 5 seconds, then ensure {{plex.transcodes}} has the correct permissions"
  wait_for:
    timeout: 5

- name: "Ensure transcodes folder has the correct permissions"
  file:
    path: "{{plex.transcodes}}"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    recurse: yes

- name: Check WebTools exists
  stat:
    path: "{{role_dir}}/Library/Application Support/Plex Media Server/Plug-ins/WebTools.bundle"
  register: webtools_bundle

- name: Wait for Plug-ins folder to be created by Plex
  wait_for:
    path: "{{role_dir}}/Library/Application Support/Plex Media Server/Plug-ins"
    state: present
  when: webtools_bundle.stat.exists == False

- name: Install WebTools
  unarchive:
    src: https://github.com/ukdtom/WebTools.bundle/releases/download/3.0.0/WebTools.bundle.zip
    dest: "{{role_dir}}/Library/Application Support/Plex Media Server/Plug-ins"
    copy: no
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    validate_certs: no
  when: webtools_bundle.stat.exists == False

- name: Create plex_autoscan Logs folder
  file:
    path: "{{role_dir}}/Library/Logs/Plex Media Server"
    state: directory
    mode: 0775
    owner: "{{user}}"
    group: "{{user}}"
